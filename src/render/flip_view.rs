//! This example shows how to create a custom render pass that runs after the main pass
//! and reads the texture generated by the main pass.
//!
//! The example shader is a very simple implementation of chromatic aberration.
//!
//! This is a fairly low level example and assumes some familiarity with rendering concepts and wgpu.

use bevy::{
    asset::load_internal_asset,
    core_pipeline::{
        core_3d::{
            self,
            graph::{Core3d, Node3d},
        },
        fullscreen_vertex_shader::fullscreen_shader_vertex_state,
    },
    ecs::query::QueryItem,
    prelude::*,
    render::{
        extract_component::{ExtractComponent, ExtractComponentPlugin},
        render_graph::{
            NodeRunError, RenderGraphApp, RenderGraphContext, RenderLabel, ViewNode, ViewNodeRunner,
        },
        render_resource::{
            binding_types::{sampler, texture_2d},
            BindGroupEntries, BindGroupLayout, BindGroupLayoutEntries, CachedRenderPipelineId,
            ColorTargetState, ColorWrites, FragmentState, MultisampleState, Operations,
            PipelineCache, PrimitiveState, RenderPassColorAttachment, RenderPassDescriptor,
            RenderPipelineDescriptor, Sampler, SamplerBindingType, SamplerDescriptor, ShaderStages,
            TextureFormat, TextureSampleType,
        },
        renderer::{RenderContext, RenderDevice},
        texture::BevyDefault,
        view::ViewTarget,
        RenderApp,
    },
};

pub struct FlipViewPlugin;

#[derive(Component, Clone, Copy, ExtractComponent, PartialEq, Eq)]
pub enum FlipView {
    X,
    Y,
    XY,
}

const FLIP_VIEW_HANDLE: Handle<Shader> = Handle::weak_from_u128(9837534426033940724);

impl Plugin for FlipViewPlugin {
    fn build(&self, app: &mut App) {
        load_internal_asset!(app, FLIP_VIEW_HANDLE, "flip_view.wgsl", Shader::from_wgsl);

        app.add_plugins((ExtractComponentPlugin::<FlipView>::default(),));

        let Ok(render_app) = app.get_sub_app_mut(RenderApp) else {
            return;
        };

        render_app
            .add_render_graph_node::<ViewNodeRunner<FlipViewNode>>(Core3d, FlipViewLabel)
            .add_render_graph_edges(
                Core3d,
                (
                    Node3d::Tonemapping,
                    FlipViewLabel,
                    Node3d::EndMainPassPostProcessing,
                ),
            );
    }

    fn finish(&self, app: &mut App) {
        let Ok(render_app) = app.get_sub_app_mut(RenderApp) else {
            return;
        };

        render_app.init_resource::<FlipViewPipeline>();
    }
}

#[derive(Default)]
struct FlipViewNode;

#[derive(Debug, Hash, PartialEq, Eq, Clone, RenderLabel)]
struct FlipViewLabel;

impl ViewNode for FlipViewNode {
    type ViewQuery = (&'static ViewTarget, &'static FlipView);

    fn run(
        &self,
        _graph: &mut RenderGraphContext,
        render_context: &mut RenderContext,
        (view_target, flip_view): QueryItem<Self::ViewQuery>,
        world: &World,
    ) -> Result<(), NodeRunError> {
        let post_process_pipeline = world.resource::<FlipViewPipeline>();

        let pipeline_cache = world.resource::<PipelineCache>();

        // Get the pipeline from the cache
        let Some(pipeline_x) =
            pipeline_cache.get_render_pipeline(post_process_pipeline.pipeline_id_x)
        else {
            return Ok(());
        };

        let Some(pipeline_y) =
            pipeline_cache.get_render_pipeline(post_process_pipeline.pipeline_id_y)
        else {
            return Ok(());
        };

        let post_process = view_target.post_process_write();

        let bind_group = render_context.render_device().create_bind_group(
            "post_process_flip_view_bind_group",
            &post_process_pipeline.layout,
            &BindGroupEntries::sequential((post_process.source, &post_process_pipeline.sampler)),
        );

        let mut render_pass = render_context.begin_tracked_render_pass(RenderPassDescriptor {
            label: Some("post_process_flip_view_pass"),
            color_attachments: &[Some(RenderPassColorAttachment {
                view: post_process.destination,
                resolve_target: None,
                ops: Operations::default(),
            })],
            ..default()
        });

        render_pass.set_bind_group(0, &bind_group, &[]);

        if *flip_view == FlipView::X || *flip_view == FlipView::XY {
            render_pass.set_render_pipeline(pipeline_x);
            render_pass.draw(0..3, 0..1);
        }

        if *flip_view == FlipView::Y || *flip_view == FlipView::XY {
            render_pass.set_render_pipeline(pipeline_y);
            render_pass.draw(0..3, 0..1);
        }

        Ok(())
    }
}

// This contains global data used by the render pipeline. This will be created once on startup.
#[derive(Resource)]
struct FlipViewPipeline {
    layout: BindGroupLayout,
    sampler: Sampler,
    pipeline_id_x: CachedRenderPipelineId,
    pipeline_id_y: CachedRenderPipelineId,
}

impl FromWorld for FlipViewPipeline {
    fn from_world(world: &mut World) -> Self {
        let render_device = world.resource::<RenderDevice>();

        let layout = render_device.create_bind_group_layout(
            "post_process_flip_view_bind_group_layout",
            &BindGroupLayoutEntries::sequential(
                // The layout entries will only be visible in the fragment stage
                ShaderStages::FRAGMENT,
                (
                    // The screen texture
                    texture_2d(TextureSampleType::Float { filterable: true }),
                    // The sampler that will be used to sample the screen texture
                    sampler(SamplerBindingType::Filtering),
                ),
            ),
        );

        let sampler = render_device.create_sampler(&SamplerDescriptor {
            address_mode_u: bevy::render::render_resource::AddressMode::Repeat,
            address_mode_v: bevy::render::render_resource::AddressMode::Repeat,
            ..default()
        });

        let shader = FLIP_VIEW_HANDLE;

        let pipeline_id_x =
            world
                .resource_mut::<PipelineCache>()
                .queue_render_pipeline(RenderPipelineDescriptor {
                    label: Some("post_process_flip_view_x_pipeline".into()),
                    layout: vec![layout.clone()],
                    vertex: fullscreen_shader_vertex_state(),
                    fragment: Some(FragmentState {
                        shader: shader.clone(),
                        shader_defs: vec![],
                        entry_point: "x".into(),
                        targets: vec![Some(ColorTargetState {
                            format: TextureFormat::bevy_default(),
                            blend: None,
                            write_mask: ColorWrites::ALL,
                        })],
                    }),
                    primitive: PrimitiveState::default(),
                    depth_stencil: None,
                    multisample: MultisampleState::default(),
                    push_constant_ranges: vec![],
                });

        let pipeline_id_y =
            world
                .resource_mut::<PipelineCache>()
                .queue_render_pipeline(RenderPipelineDescriptor {
                    label: Some("post_process_flip_view_y_pipeline".into()),
                    layout: vec![layout.clone()],
                    vertex: fullscreen_shader_vertex_state(),
                    fragment: Some(FragmentState {
                        shader,
                        shader_defs: vec![],
                        entry_point: "y".into(),
                        targets: vec![Some(ColorTargetState {
                            format: TextureFormat::bevy_default(),
                            blend: None,
                            write_mask: ColorWrites::ALL,
                        })],
                    }),
                    primitive: PrimitiveState::default(),
                    depth_stencil: None,
                    multisample: MultisampleState::default(),
                    push_constant_ranges: vec![],
                });

        Self {
            layout,
            sampler,
            pipeline_id_x,
            pipeline_id_y,
        }
    }
}
